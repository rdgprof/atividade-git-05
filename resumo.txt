RESUMO UNIDADE 1

Programação Orientada a Objetos (POO) é um paradigma de programação baseado na utilização de "objetos", que são instâncias de "classes". Os principais conceitos dessa abordagem incluem:

Classe: É uma estrutura que define um tipo de dado, com seus atributos (ou propriedades) e métodos (ou funções). Classes servem como moldes para criar objetos. Por exemplo, uma classe Carro pode ter atributos como cor e modelo, e métodos como acelerar() e frear().

Objeto: É uma instância de uma classe. Cada objeto pode ter valores diferentes para seus atributos, mas compartilha a mesma estrutura e comportamento definidos pela classe. Por exemplo, um objeto meuCarro da classe Carro pode ter cor = "vermelho" e modelo = "Fusca".

Encapsulamento: Refere-se ao princípio de esconder os detalhes internos de um objeto e expor apenas o que é necessário. Isso é feito através de modificadores de acesso, como private, protected e public, que controlam a visibilidade dos atributos e métodos. O encapsulamento ajuda a proteger os dados e a manter a integridade do objeto.

Herança: Permite que uma classe (chamada de classe filha ou derivada) herde atributos e métodos de outra classe (chamada de classe pai ou base). Isso promove a reutilização de código e a criação de uma hierarquia de classes. Por exemplo, uma classe CarroEsportivo pode herdar de Carro e adicionar novos atributos e métodos específicos.

Polimorfismo: Permite que objetos de diferentes classes sejam tratados como objetos de uma classe comum, especialmente quando se trata de métodos. Isso significa que um método pode ter diferentes implementações dependendo do tipo de objeto que o chama. O polimorfismo pode ser implementado através da sobrecarga de métodos (métodos com o mesmo nome, mas com diferentes parâmetros) e da sobreposição de métodos (substituição de métodos em classes derivadas).

Abstração: Refere-se ao princípio de simplificar a complexidade, fornecendo uma interface clara e escondendo os detalhes de implementação. A abstração permite que os desenvolvedores se concentrem nas funcionalidades essenciais de um objeto, sem se preocupar com como essas funcionalidades são implementadas internamente.
